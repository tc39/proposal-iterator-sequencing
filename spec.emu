<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Iterator Sequencing
status: proposal
stage: 2.7
contributors: Michael Ficarra
location: https://tc39.es/proposal-iterator-sequencing/
copyright: false
</pre>

<emu-clause id="sec-iterator.concat">
  <h1>Iterator.concat ( ..._items_ )</h1>
  <emu-alg>
    1. Let _iterables_ be a new empty List.
    1. For each element _item_ of _items_, do
      1. If _item_ is not an Object, throw a *TypeError* exception.
      1. Let _method_ be ? GetMethod(_item_, %Symbol.iterator%).
      1. If _method_ is *undefined*, throw a *TypeError* exception.
      1. Append the Record { [[OpenMethod]]: _method_, [[Iterable]]: _item_ } to _iterables_.
    1. Let _closure_ be a new Abstract Closure with no parameters that captures _iterables_ and performs the following steps when called:
      1. For each Record _iterable_ of _iterables_, do
        1. Let _iter_ be ? Call(_iterable_.[[OpenMethod]], _iterable_.[[Iterable]]).
        1. If _iter_ is not an Object, throw a *TypeError* exception.
        1. Let _iteratorRecord_ be ? GetIteratorDirect(_iter_).
        1. Let _innerAlive_ be *true*.
        1. Repeat, while _innerAlive_ is *true*,
          1. Let _iteratorResult_ be ? IteratorNext(_iteratorRecord_).
          1. Let _done_ be Completion(IteratorComplete(_iteratorResult_)).
          1. If _done_ is a throw completion, then
            1. Set _iteratorRecord_.[[Done]] to *true*.
            1. Return ? _done_.
          1. Set _done_ to ! _done_.
          1. If _done_ is *true*, then
            1. Set _iteratorRecord_.[[Done]] to *true*.
            1. Perform ? IteratorValue(_iteratorResult_).
            1. Set _innerAlive_ to *false*.
          1. Else,
            1. Let _completion_ be Completion(GeneratorYield(_iteratorResult_)).
            1. If _completion_ is an abrupt completion, then
              1. Return ? IteratorClose(_iteratorRecord_, _completion_).
      1. Return ReturnCompletion(*undefined*).
    1. Let _gen_ be CreateIteratorFromClosure(_closure_, *"Iterator Helper"*, %IteratorHelperPrototype%, « [[UnderlyingIterators]] »).
    1. Set _gen_.[[UnderlyingIterators]] to a new empty List.
    1. Return _gen_.
  </emu-alg>
</emu-clause>
